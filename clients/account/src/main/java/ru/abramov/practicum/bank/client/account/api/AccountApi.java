/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.abramov.practicum.bank.client.account.api;

import ru.abramov.practicum.bank.client.account.model.AccountDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-13T12:22:27.312782+03:00[Europe/Moscow]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Account", description = "the Account API")
public interface AccountApi {

    /**
     * POST /user : Создать новый счёт
     *
     * @param accountDto  (required)
     * @return Счёт успешно создан (status code 201)
     */
    @Operation(
        operationId = "addAccount",
        summary = "Создать новый счёт",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Счёт успешно создан", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = "application/json"
    )
    @ResponseStatus(HttpStatus.CREATED)
    
    AccountDto addAccount(
        @Parameter(name = "AccountDto", description = "", required = true) @Valid @RequestBody AccountDto accountDto
    );


    /**
     * DELETE /user/{id} : Удалить счёт по ID
     *
     * @param id ID счёта (required)
     * @return Счёт удалён (status code 200)
     */
    @Operation(
        operationId = "deleteAccount",
        summary = "Удалить счёт по ID",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Счёт удалён")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{id}"
    )
    @ResponseStatus(HttpStatus.OK)
    
    void deleteAccount(
        @Parameter(name = "id", description = "ID счёта", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /user/{id} : Получить счёт по ID
     *
     * @param id ID счёта (required)
     * @return Данные счёта (status code 200)
     */
    @Operation(
        operationId = "getAccount",
        summary = "Получить счёт по ID",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Данные счёта", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{id}",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    AccountDto getAccount(
        @Parameter(name = "id", description = "ID счёта", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /user : Получить список счетов пользователя
     *
     * @return Список счетов (status code 200)
     */
    @Operation(
        operationId = "getAccounts",
        summary = "Получить список счетов пользователя",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список счетов", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    List<AccountDto> getAccounts(
        
    );

}
